# Nginx Security Rules for Falco
# Version: 0.4.0
# Compatible with: Falco Plugin SDK for Go
# 
# This ruleset uses lists and macros for better maintainability and reduced false positives

# =========================
# Reusable lists
# =========================
- list: nginx_methods_readonly
  items: [GET, HEAD, OPTIONS]

- list: nginx_methods_with_body
  items: [POST, PUT, PATCH]

- list: nginx_login_paths
  items: [/login, /signin, /auth, /wp-login.php, /session, /api/auth]

- list: nginx_admin_paths
  items: [/admin, /wp-admin, /manager, /phpmyadmin]

- list: nginx_api_paths
  items: [/api/, /v1/, /v2/, /rest/, /graphql]

- list: nginx_static_exts
  items: [.css, .js, .png, .jpg, .jpeg, .svg, .ico, .gif, .woff, .woff2, .map]

- list: nginx_sqli_tokens_words
  items:
    [ "select", "union", "sleep(", "update", "insert", "drop", " or ",
      "' or '1'='1", "benchmark(", "information_schema", "load_file(" ]

- list: nginx_sqli_tokens_rawchars
  items: ["'", "\"", ";", "--", "#", "%27", "%22", "%3B", "%2D%2D", "%23"]

- list: nginx_cmdinj_tokens_words
  items:
    [ "sh -c", "bash -c", "cat /etc/passwd", "wget ", "curl ",
      "nc ", "powershell", "cmd /c", "||", "|", "&", "$(", "`" ]

- list: nginx_traversal_tokens
  items: ["../", "..%2f", "%2e%2e%2f", "/etc/passwd", "/.ssh/", "/windows/system32"]

- list: nginx_xss_tokens
  items:
    [ "<script", "%3cscript", "javascript:", "onerror=", "onload=", "document.cookie" ]

- list: nginx_bad_user_agents
  items: ["sqlmap", "nikto", "nmap", "curl", "wget", "libwww", "python-requests"]

# =========================
# Reusable macros
# =========================
# Toggle: Set to true to enable debug rules
- macro: nginx_debug_enabled
  condition: (false)

# Static file delivery is noisy, so exclude it
- macro: nginx_is_static
  condition: >
    (nginx.path endswith (nginx_static_exts))

# Common auth/admin/api paths
- macro: nginx_is_login_path
  condition: (nginx.path startswith (nginx_login_paths))

- macro: nginx_is_admin_path
  condition: (nginx.path startswith (nginx_admin_paths))

- macro: nginx_is_api_path
  condition: (nginx.path startswith (nginx_api_paths))

# Method types
- macro: nginx_is_readonly
  condition: (nginx.method in (nginx_methods_readonly))

- macro: nginx_has_body_method
  condition: (nginx.method in (nginx_methods_with_body))

# Attack indicators with both character types and words
- macro: nginx_has_sqli_words
  condition: (nginx.query_string pmatch (nginx_sqli_tokens_words))

- macro: nginx_has_sqli_rawchars
  condition: (nginx.raw pmatch (nginx_sqli_tokens_rawchars))

- macro: nginx_has_cmdinj_words
  condition: (nginx.raw pmatch (nginx_cmdinj_tokens_words))

- macro: nginx_has_traversal
  condition: (nginx.path pmatch (nginx_traversal_tokens) or
              nginx.query_string pmatch (nginx_traversal_tokens))

- macro: nginx_has_xss
  condition: (nginx.path pmatch (nginx_xss_tokens) or
              nginx.query_string pmatch (nginx_xss_tokens))

# =========================
# Rules
# =========================

# SQLi: Require both "words + symbols/encoding" to reduce false positives
- rule: NGINX SQLi Attempt
  desc: Likely SQL injection attempt detected in URL or query string
  enabled: true
  priority: CRITICAL
  source: nginx
  condition: >
    (not nginx_is_static) and
    (nginx_is_readonly or nginx_has_body_method) and
    nginx_has_sqli_words and nginx_has_sqli_rawchars
  output: >
    [NGINX SQLi] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    qs=%nginx.query_string ua=%nginx.user_agent status=%nginx.status
  tags: [web, attack, sqli]

# Command injection: Dangerous words + admin/login/api/non-static
- rule: NGINX Command Injection Attempt
  desc: Possible command injection payload observed
  enabled: true
  priority: CRITICAL
  source: nginx
  condition: >
    (not nginx_is_static) and
    (nginx_is_admin_path or nginx_is_login_path or nginx_is_api_path or nginx_has_body_method) and
    nginx_has_cmdinj_words
  output: >
    [NGINX CMDi] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    raw=%nginx.raw ua=%nginx.user_agent status=%nginx.status
  tags: [web, attack, command_injection]

# XSS: Match representative tokens (excluding static delivery)
- rule: NGINX XSS Attempt
  desc: XSS-related tokens found in request path or query string
  enabled: true
  priority: WARNING
  source: nginx
  condition: >
    (not nginx_is_static) and nginx_has_xss
  output: >
    [NGINX XSS] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    qs=%nginx.query_string ua=%nginx.user_agent status=%nginx.status
  tags: [web, attack, xss]

# Path traversal
- rule: NGINX Path Traversal Attempt
  desc: Directory traversal tokens in request
  enabled: true
  priority: CRITICAL
  source: nginx
  condition: >
    (not nginx_is_static) and nginx_has_traversal
  output: >
    [NGINX Traversal] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    qs=%nginx.query_string ua=%nginx.user_agent status=%nginx.status
  tags: [web, attack, traversal]

# Typical brute force early signs (401/403 on sensitive paths)
- rule: NGINX Auth Failure on Login/Admin Path
  desc: Authentication failures on login/admin endpoints
  enabled: true
  priority: NOTICE
  source: nginx
  condition: >
    (nginx.status in (401, 403)) and
    (nginx_is_login_path or nginx_is_admin_path)
  output: >
    [NGINX AuthFail] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    status=%nginx.status ua=%nginx.user_agent
  tags: [web, auth, brute_force, signal]

# Scanner / Tool user agents
- rule: NGINX Suspicious User-Agent
  desc: Known scanning or tool-like user-agents
  enabled: true
  priority: INFORMATIONAL
  source: nginx
  condition: (nginx.user_agent pmatch (nginx_bad_user_agents))
  output: >
    [NGINX UA] ip=%nginx.remote_addr ua=%nginx.user_agent path=%nginx.path
    status=%nginx.status
  tags: [recon, user_agent]

# (Optional) Debug rules are toggle-controlled
- rule: NGINX Debug - Semicolon or PHP Path
  desc: Very noisy; enable only for troubleshooting
  enabled: false
  priority: INFORMATIONAL
  source: nginx
  condition: nginx_debug_enabled and
             (nginx.raw contains ";" or nginx.path contains ".php")
  output: >
    [NGINX Debug] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path raw=%nginx.raw
  tags: [debug]

# HTTP Error monitoring
- rule: NGINX HTTP Server Error
  desc: Detects HTTP 5xx server errors
  enabled: true
  priority: NOTICE
  source: nginx
  condition: >
    nginx.status >= 500
  output: >
    [NGINX 5xx] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    status=%nginx.status ua=%nginx.user_agent
  tags: [error, server, web]

# Large response detection
- rule: NGINX Large Response Body
  desc: Detects unusually large response bodies (>10MB)
  enabled: true
  priority: INFORMATIONAL
  source: nginx
  condition: >
    nginx.bytes_sent > 10485760
  output: >
    [NGINX Large] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    bytes=%nginx.bytes_sent ua=%nginx.user_agent
  tags: [anomaly, web]

# Sensitive file access attempt
- rule: NGINX Sensitive File Access Attempt
  desc: Detects attempts to access sensitive files
  enabled: true
  priority: WARNING
  source: nginx
  condition: >
    nginx.path contains ".git" or
    nginx.path contains ".env" or
    nginx.path contains "wp-config" or
    nginx.path contains ".htaccess" or
    nginx.path contains ".htpasswd" or
    nginx.path contains ".ssh" or
    nginx.path contains "id_rsa"
  output: >
    [NGINX Sensitive] ip=%nginx.remote_addr method=%nginx.method path=%nginx.path
    status=%nginx.status ua=%nginx.user_agent
  tags: [attack, information_disclosure, web]