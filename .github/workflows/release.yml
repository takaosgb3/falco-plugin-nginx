name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.1.3)'
        required: true
        type: string

# Minimal permissions - only what's needed
permissions:
  contents: write  # For creating releases

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    # Security: Prevent PWN requests from forks
    if: github.event_name == 'workflow_dispatch' && github.repository == 'takaosgb3/falco-plugin-nginx'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Security: Shallow clone, only what we need
          fetch-depth: 1
          # Security: Don't persist credentials
          persist-credentials: false

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! echo "$VERSION" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format vX.Y.Z"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install Falco for validation
        run: |
          # Install Falco for rule validation
          curl -fsSL https://falco.org/repo/falcosecurity-packages.asc | \
            sudo gpg --dearmor -o /usr/share/keyrings/falco-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable main" | \
            sudo tee /etc/apt/sources.list.d/falcosecurity.list
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y falco

      - name: Build plugin binary
        run: |
          cd plugin
          # Build for Linux AMD64 only
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -buildmode=c-shared \
            -o libfalco-nginx-plugin-linux-amd64.so \
            -ldflags="-s -w" \
            .
          
          # Verify binary format
          file libfalco-nginx-plugin-linux-amd64.so | grep -q "ELF 64-bit LSB shared object" || exit 1
          
          # Move to release directory
          cd ..
          mkdir -p release
          mv plugin/libfalco-nginx-plugin-linux-amd64.so release/
          cp rules/nginx_rules.yaml release/

      - name: Validate rules with Falco
        run: |
          # Install plugin for validation
          sudo mkdir -p /usr/share/falco/plugins
          sudo cp release/libfalco-nginx-plugin-linux-amd64.so /usr/share/falco/plugins/libfalco-nginx-plugin.so
          
          # Update load_plugins array to include nginx
          if grep -q "^load_plugins:" /etc/falco/falco.yaml; then
            # Check if it's empty array
            if grep -q "^load_plugins: \[\]" /etc/falco/falco.yaml; then
              sudo sed -i 's/^load_plugins: \[\]/load_plugins: [nginx]/' /etc/falco/falco.yaml
            elif ! grep -q "nginx" /etc/falco/falco.yaml; then
              # Add nginx to existing array
              sudo sed -i '/^load_plugins:/ s/\]/,nginx\]/' /etc/falco/falco.yaml
            fi
          else
            # Add load_plugins line at the beginning of the file
            sudo sed -i '1s/^/load_plugins: [nginx]\n/' /etc/falco/falco.yaml
          fi
          
          # Configure plugin section
          if ! grep -q "^plugins:" /etc/falco/falco.yaml; then
            # Add plugins configuration section
            echo "" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "# nginx plugin configuration" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "plugins:" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "  - name: nginx" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "    library_path: /usr/share/falco/plugins/libfalco-nginx-plugin.so" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "    init_config:" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "      log_paths:" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            echo "        - /var/log/nginx/access.log" | sudo tee -a /etc/falco/falco.yaml > /dev/null
          else
            # Check if nginx plugin is configured
            if ! grep -A5 "^plugins:" /etc/falco/falco.yaml | grep -q "name: nginx"; then
              # Add nginx plugin to existing plugins section
              echo "  - name: nginx" | sudo tee -a /etc/falco/falco.yaml > /dev/null
              echo "    library_path: /usr/share/falco/plugins/libfalco-nginx-plugin.so" | sudo tee -a /etc/falco/falco.yaml > /dev/null
              echo "    init_config:" | sudo tee -a /etc/falco/falco.yaml > /dev/null
              echo "      log_paths:" | sudo tee -a /etc/falco/falco.yaml > /dev/null
              echo "        - /var/log/nginx/access.log" | sudo tee -a /etc/falco/falco.yaml > /dev/null
            fi
          fi
          
          # Test that plugin loads correctly
          echo "Testing plugin loads..."
          sudo falco --list-plugins | grep nginx || (echo "❌ Plugin not loaded"; exit 1)
          
          # Validate the rules
          echo "Validating nginx rules..."
          sudo falco --validate release/nginx_rules.yaml
          
          echo "✅ Rules validation passed"

      - name: Generate checksums
        run: |
          cd release
          sha256sum libfalco-nginx-plugin-linux-amd64.so > libfalco-nginx-plugin-linux-amd64.so.sha256
          sha256sum nginx_rules.yaml > nginx_rules.yaml.sha256

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Create release notes
          cat > release-notes.md << EOF
          ## Release $VERSION
          
          ### 📦 Assets
          - \`libfalco-nginx-plugin-linux-amd64.so\`: Plugin binary for Linux x86_64
          - \`nginx_rules.yaml\`: Falco rules for nginx security monitoring
          
          ### 🔧 Installation
          \`\`\`bash
          # One-liner installation
          curl -sSL https://raw.githubusercontent.com/takaosgb3/falco-plugin-nginx/main/install.sh | sudo bash
          
          # Manual download
          wget https://github.com/takaosgb3/falco-plugin-nginx/releases/download/$VERSION/libfalco-nginx-plugin-linux-amd64.so
          wget https://github.com/takaosgb3/falco-plugin-nginx/releases/download/$VERSION/nginx_rules.yaml
          \`\`\`
          
          ### 📝 Changelog
          See [CHANGELOG.md](https://github.com/takaosgb3/falco-plugin-nginx/blob/main/CHANGELOG.md) for details.
          EOF
          
          # Create release with assets
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file release-notes.md \
            release/libfalco-nginx-plugin-linux-amd64.so \
            release/nginx_rules.yaml \
            release/*.sha256